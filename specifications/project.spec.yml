openapi: 3.0.0
info:
  title: API сервер для проекта SIX-SITIES 
  description: |-
    * Список ресурсов и маршрутов сервера «six-sities».
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  version: "1.0.0"
tags:
  - name: offers
    description: Действия с объявлениями
  - name: comments
    description: Действия с комментариями
  - name: users
    description: Действия с пользователем

paths: 

  /offers/reqister:
    post:
      tags:
        - offers
      summary: Добавление объявления
      description: Добавляет новое объявление

      requestBody:
        description: Информация для создания нового объявления

        content:
          application/json:
            schema:
              $ref: '#/components/schemas/offer'
        required: true

      responses:
        "201": 
          description: Объявление добавлено. Объект пользователя
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/offer'

        "405":
          description: Данные не прошли валидацию

  /offers/{offerId}:
    get:
        tags:
          - offers
        summary: Получение объявление
        description: Получает детальную информацию по объявлению

        responses:
          "201": 
            description: Объявление добавлено. Объект пользователя
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/offer'

          "405":
            description: Данные не прошли валидацию

    patch:
      tags:
        - offers
      summary: Редактирование объявления
      description: Вносит изменени в объявление на основе его id
    delete:
      tags:
        - offers
      summary: Удаление объявления
      description: Удаляет объявление по его id

  /offers:
    get:
      tags:
        - offers
      summery: Получение всех объявлений
      description: Получает список всех имеющихся объявлений с опредленными полями

  /offers/{city}/premium:
    get:
        tags:
          - offers
        summery: Получение премиальных объявлений в городе
        description: Получает список всех премиальных объявлений в определенном городе
  
  /offers/{userId}/favourites:
    post:
        tags:
          - offers
        summery: Добавление объявления в избранное
        description: Добавит объявление в избранные для авторизированного пользователя
    get:
        tags:
          - offers
        summery: Получение избранных предложений
        description: Получает все избранные предложения авторизованного пользователя

  /offers/{userId}/favourites/{offerId}:
    delete:
      tags:
        - offers
      summery: Удаление объявления из избранного
      description: Удаляет объявление по его id из избранных авторизованног опользователя

  /comments/{offerId}:
    get:
      tags:
        - comments
      summery: Получение комментариев
      description: Получает список все комментарии по определенному предложению
    
    post:
      tags:
        - comments
      summery: Добавление комментария
      description: Добавляет новый комментарий к предложению

  /users/register:
    post:
      tags:
        - users
      summary: Регистрация пользователя
      description: Регистрирует нового пользователя

      requestBody:
        description: Информация для создания нового пользователя
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createUser'
        required: true

      responses:
        "201": 
          description: Пользователь зарегистрирован. Объект пользователя
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'

        "409":
          description: Пользователь с таким email уже существует

  /users/login:
    post:
      tags:
        - users
      summary: Аутентификации и авторизации пользователя
      description: Авторизирует пользователя на основе логина и пароля

      requestBody:
        description: Информация для создания нового пользователя
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/usersLogin'
        required: true

      responses:
        "201": 
          description: Пользователь авторизирован
          content:
            application/json:
              schema:
                type: object

                properties:
                  token:
                    type: string
                    example: '###################'

        "409":
          description: Логин или пароль неверные или пользователь не существует

    get:
      tags:
        - users

      summary: Получение информации об авторизации пользователя
      description: Получит данные пользователя на основе токена

      requestBody:
        description: Токен пользователя
        content:
          application/json:
            schema:
              type: object

              properties:
                token:
                  type: string
                  example: '###################'
        required: true

      responses:
        "201": 
          description: Пользователь авторизирован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'


  

components:
  schemas:
    offer:
      type: object

      properties:
        title: 
          type: string
          example: Заголовок объявления

        description:
          type: string
          example: Описание объявления

        createdDate:
          type: string
          example: '2023-09-22T16:17:26.404Z'

        city: 
          type: string
          example: 'Один из 6 городов'

        previewImage:
          type: string
          example: 'studio.jpg'

        images: 
          type: array
          example: ['studio.jpg', 'studio-1.jpg']

        isPremium: 
          type: boolean
          example: false

        isFavourites: 
          type: boolean
          example: false

        rating: 
          type: number
          example: 0

        housingType: 
          type: string
          example: 'studio'

        rooms: 
          type: number
          example: 1
        
        guestsNumber: 
          type: number
          example: 1

        price: 
          type: number
          example: 100

        comfort: 
          type: array
          example: ['Fridge', 'Towels']

        userType: 
          type: string
          example: User

        comments: 
          type: number
          example: 0
        
        userId:
          type: string
          example: '6524578b3e67fd0291b6996f'

        coordinates:
          type: object
          $ref: '#/components/schemas/coordinates'

    coordinates:
      type: object
      properties:
            lat:
              type: string
              example: '48.85661'
            long:
              type: string
              example: '2.351499'

    createUser:
      type: object

      properties:
        email:
          type: string
          example: test@mail.ru
        
        name:
          type: string
          example: John Doe

        avatar: 
          type: string
          example: awesome-avatar.jpg

        password:
          type: string
          example: 123456

        userType:
          type: string
          example: User

    usersLogin:
      type: object

      properties:
        email:
          type: string
          example: test@mail.ru

        password:
          type: string
          example: 123456

    user:
      type: object

      properties:
        email:
          type: string
          example: test@mail.ru
        
        name:
          type: string
          example: John Doe

        avatar: 
          type: string
          example: awesome-avatar.jpg

        userType:
          type: string
          example: User

        id: 
          type: string
          example: 6524578b3e67fd0291b6996f